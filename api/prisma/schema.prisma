generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid())
  adminId   String    @unique
  email     String    @unique
  password  String
  firstname String
  lastname  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@index([email], map: "idx_admin_email")
  @@index([adminId], map: "idx_admin_adminId")
  @@index([firstname], map: "idx_admin_firstname")
  @@index([lastname], map: "idx_admin_lastname")
}

model Member {
  id         Int       @id @default(autoincrement())
  memberId   String    @unique
  firstname  String
  lastname   String?
  email      String
  phone      String?
  status     String    @default("active")
  modifiedBy Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  deletedAt  DateTime?
  lendings   Lending[]

  @@index([email], map: "idx_member_email")
  @@index([memberId], map: "idx_member_memberId")
  @@index([firstname], map: "idx_member_firstname")
  @@index([lastname], map: "idx_member_lastname")
  @@index([phone], map: "idx_member_phone")
}

model Book {
  id         Int         @id @default(autoincrement())
  title      String
  author     String
  isbn       String      @unique
  quantity   Int
  categoryId Int
  modifiedBy Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?
  deletedAt  DateTime?
  category   Category    @relation("BookCategory", fields: [categoryId], references: [id])
  bookStatus BookStatus?
  lending    Lending[]

  @@index([title], map: "idx_book_title")
  @@index([author], map: "idx_book_author")
  @@index([isbn], map: "idx_book_isbn")
  @@index([categoryId], map: "idx_book_categoryId")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[] @relation("BookCategory")

  @@index([name], map: "idx_name")
}

model Lending {
  id           Int       @id @default(autoincrement())
  bookId       Int
  memberId     Int
  borrowedDate DateTime  @default(now())
  dueDate      DateTime
  returnDate   DateTime?
  status       String    @default("borrowed")
  modifiedBy   Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  book         Book      @relation(fields: [bookId], references: [id])
  member       Member    @relation(fields: [memberId], references: [id])

  @@index([bookId, memberId], map: "idx_lending_book_member")
}

model BookStatus {
  id           Int  @id @default(autoincrement())
  bookId       Int  @unique
  availableQty Int
  borrowedQty  Int
  book         Book @relation(fields: [bookId], references: [id])
}
